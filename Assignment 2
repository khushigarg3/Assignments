{
 "cells": [
  {
   "cell_type": "raw",
   "id": "37cc8d94",
   "metadata": {},
   "source": [
    "1.      Boolean datatype has two values True and False\n",
    "\n",
    "\n",
    "2.     3 diff. Boolean/Logical Operators :-\n",
    "    \n",
    "       AND       returns True if both statements are true\n",
    "       OR        returns True if any one of the statement is True\n",
    "       NOT       reverse the result if result is False it produce True result\n",
    "        \n",
    "        \n",
    "3.     \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "4.        False\n",
    "          False\n",
    "          True\n",
    "          False\n",
    "          False\n",
    "          True\n",
    "            \n",
    "            \n",
    "5.       ==    equal\n",
    "         !=    not equal\n",
    "         >     greater than\n",
    "         <     less than\n",
    "         >=    greater than or equals to\n",
    "         <=    less than or equals to\n",
    "            \n",
    "            \n",
    "            \n",
    "6.       == equal to is used to compare two literals(int,float,str).   eg. x,y = 20,10\n",
    "                                                                          print(x==y)\n",
    "                                                                           False\n",
    "        \n",
    "         = assignment operator is used to assign a value/data to a variable.   eg. x = \"python\"\n",
    "            \n",
    "            \n",
    "            \n",
    "            \n",
    "7.       spam = 0\n",
    "         if (spam==10):\n",
    "           {\n",
    "              print(\"eggs\")\n",
    "           }\n",
    "         if (spam>5):\n",
    "            {\n",
    "               print(\"bacon\")\n",
    "            }\n",
    "         else:\n",
    "            {\n",
    "                print(\"ham\")\n",
    "                print(\"spam\")\n",
    "                print(\"spam\")\n",
    "            }\n",
    "                      \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4801cbca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "please enter any positive int value :2\n",
      "Howdy\n"
     ]
    }
   ],
   "source": [
    "spam=int(input(\"please enter any positive int value :\"))\n",
    "if (spam==1):\n",
    "    print(\"Hello\")\n",
    "if (spam==2):\n",
    "    print(\"Howdy\")\n",
    "else:\n",
    "    print(\"Greetings!\")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "194746cf",
   "metadata": {},
   "source": [
    "9.       Ctrl+C\n",
    "\n",
    "\n",
    "\n",
    " \n",
    "10.    Break :-  It terminates the execution of current loop and passes the control over next loop or main body.\n",
    "       \n",
    "       Continue :-  It skips the current iteration and executes the very next iteration in the loop.\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3861d55b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# There is no difference between these :-\n",
    "\n",
    "a = list(range(10))               # by default starting value is 0 and goes till 9\n",
    "\n",
    "b = list(range(0,10))             # here starting value is set at 0 and goes till 9 with increment of 1\n",
    "\n",
    "c = list(range(0,10,1))           # starting value is 0 and goes till 9 with increment of 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cb413f9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n",
       " [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n",
       " [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a,b,c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "320ae803",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "# Numbers from 1-10 using 'for' and 'while' loop :-\n",
    "\n",
    "for i in range(1,11):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d50213a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "i=1\n",
    "while (i<=10):\n",
    "    print(i)\n",
    "    i=i+1"
   ]
  },
  {
   "cell_type": "raw",
   "id": "d4b453fc",
   "metadata": {},
   "source": [
    "13.         import spam\n",
    "            spam.bacon()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3bc9cdb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
